#!/usr/bin/env bash

## rofi-screenshot
## Author: ceuk @ github
## Author: wardxela @ github
## Licence: WTFPL
## Usage:
##    show the menu with rofi-screenshot
##    stop recording with rofi-screenshot -s

app_name="Rofi Screenshot"

# Screenshot directory
screenshot_directory="${ROFI_SCREENSHOT_DIR:-${XDG_PICTURES_DIR:-$HOME/Pictures}/Screenshots}"

# Default date format
default_date_format="${ROFI_SCREENSHOT_DATE_FORMAT:-"+%d-%m-%Y %H:%M:%S"}"

# set ffmpeg defaults
ffmpeg() {
  command ffmpeg -hide_banner -loglevel error -nostdin "$@"
}

video_to_gif() {
  ffmpeg -i "$1" -vf palettegen -f image2 -c:v png - |
    ffmpeg -i "$1" -i - -filter_complex paletteuse "$2"
}

countdown() {
  dunstify -a "$app_name" "Countdown" "Recording in 3" -t 1000
  sleep 1
  dunstify -a "$app_name" "Countdown" "Recording in 2" -t 1000
  sleep 1
  dunstify -a "$app_name" "Countdown" "Recording in 1" -t 1000
  sleep 1
}

capture_region_to_clipboard() {
  dunstify -a "$app_name" "Screenshot" "Select a region to capture"
  tmpfile="/tmp/screenshot-$1.png"
  ffcast -q "$(slop -n -f '-g %g ')" png "$tmpfile"
  xclip -selection clipboard -t image/png "$tmpfile"
  rm "$tmpfile"
  dunstify -a "$app_name" "Screenshot" "Region copied to Clipboard"
}

capture_region_to_file() {
  dunstify -a "$app_name" "Screenshot" "Select a region to capture"
  ffcast -q "$(slop -n -f '-g %g ')" png "$screenshot_directory/$1.png"
  dunstify -a "$app_name" "Screenshot" "Region saved to ${screenshot_directory//${HOME}/~}/$1.png"
}

capture_window_to_clipboard() {
  dunstify -a "$app_name" "Screenshot" "Select a window to capture"
  tmpfile="/tmp/screenshot-$1.png"
  ffcast -q -w png "$tmpfile"
  xclip -selection clipboard -t image/png "$tmpfile"
  rm "$tmpfile"
  dunstify -a "$app_name" "Screenshot" "Window copied to Clipboard"
}

capture_window_to_file() {
  dunstify -a "$app_name" "Screenshot" "Select a window to capture"
  ffcast -q -w png "$screenshot_directory/$1.png"
  dunstify -a "$app_name" "Screenshot" "Window saved to ${screenshot_directory//${HOME}/~}/$1.png"
}

capture_screen_to_clipboard() {
  tmpfile="/tmp/screenshot-$1.png"
  ffcast -q png "$tmpfile"
  xclip -selection clipboard -t image/png "$tmpfile"
  rm "$tmpfile"
  dunstify -a "$app_name" "Screenshot" "Screenshot copied to Clipboard"
}

capture_screen_to_file() {
  ffcast -q png "$screenshot_directory/$1.png"
  dunstify -a "$app_name" "Screenshot" "Saved to ${screenshot_directory//${HOME}/~}/$1.png"
}

extract_text_from_region() {
  tmpfile="/tmp/screenshot-$1.png"
  ffcast -q "$(slop -n -f '-g %g')" png "$tmpfile"
  tesseract "$tmpfile" - -l eng+rus | xclip -selection clipboard
  rm "$tmpfile"
  dunstify -a "$app_name" "Screenshot" "Text copied to Clipboard"
}

record_region_as_mp4() {
  dunstify -a "$app_name" "Record" "Select a region to record"
  ffcast -q "$(slop -n -f '-g %g ' && countdown)" rec "$screenshot_directory/$1.mp4"
  dunstify -a "$app_name" "Record" "Saved to ${screenshot_directory//${HOME}/~}/$1.mp4"
}

record_region_as_gif() {
  dunstify -a "$app_name" "Record" "Select a region to record"
  tmpfile="/tmp/record-$1.mp4"
  ffcast -q "$(slop -n -f '-g %g ' && countdown)" rec "$tmpfile"
  dunstify -a "$app_name" "Record" "Converting to gif… (can take a while)"
  video_to_gif "$tmpfile" "$screenshot_directory/$1.gif"
  rm "$tmpfile"
  dunstify -a "$app_name" "Record" "Saved to ${screenshot_directory//${HOME}/~}/$1.gif"
}

record_window_as_mp4() {
  dunstify -a "$app_name" "Record" "Select a window to record"
  ffcast -q -w rec "$screenshot_directory/$1.mp4"
  dunstify -a "$app_name" "Record" "Saved to ${screenshot_directory//${HOME}/~}/$1.mp4"
}

record_window_as_gif() {
  dunstify -a "$app_name" "Record" "Select a window to record"
  tmpfile="/tmp/record-$1.mp4"
  ffcast -q -w rec "$tmpfile"
  dunstify -a "$app_name" "Record" "Converting to gif… (can take a while)"
  video_to_gif "$tmpfile" "$screenshot_directory/$1.gif"
  rm "$tmpfile"
  dunstify -a "$app_name" "Record" "Saved to ${screenshot_directory//${HOME}/~}/$1.gif"
}

record_screen_as_mp4() {
  countdown
  ffcast -q rec "$screenshot_directory/$1.mp4"
  dunstify -a "$app_name" "Record" "Saved to ${screenshot_directory//${HOME}/~}/$1.mp4"
}

record_screen_as_gif() {
  countdown
  tmpfile="/tmp/record-$1.mp4"
  ffcast -q rec "$tmpfile"
  dunstify -a "$app_name" "Record" "Converting to gif… (can take a while)"
  video_to_gif "$tmpfile" "$screenshot_directory/$1.gif"
  rm "$tmpfile"
  dunstify -a "$app_name" "Record" "Saved to ${screenshot_directory//${HOME}/~}/$1.gif"
}

stop_recording() {
  if [ -z "$(pgrep -fxn '(/\S+)*ffmpeg\s.*\sx11grab\s.*')" ]; then
    dunstify -a "$app_name" "Record" "No recording found"
    exit 1
  fi

  pkill -fxn '(/\S+)*ffmpeg\s.*\sx11grab\s.*'
  dunstify -a "$app_name" "Record" "Recording stopped"
}

check_deps() {
  if ! hash "$1" 2> /dev/null; then
    echo "Error: This script requires $1"
    exit 1
  fi
}

show_options() {
  echo -e "\0prompt\x1fScreenshot"
  echo -e "Capture Region (Clipboard)\0icon\x1fimage-x-generic\x1fmeta\x1fScreenshot"
  echo -e "Capture Region (File)\0icon\x1fimage-x-generic\x1fmeta\x1fScreenshot"
  echo -e "Capture Window (Clipboard)\0icon\x1fimage-x-generic\x1fmeta\x1fScreenshot"
  echo -e "Capture Window (File)\0icon\x1fimage-x-generic\x1fmeta\x1fScreenshot"
  echo -e "Capture Screen (Clipboard)\0icon\x1fimage-x-generic\x1fmeta\x1fScreenshot"
  echo -e "Capture Screen (File)\0icon\x1fimage-x-generic\x1fmeta\x1fScreenshot"
  echo -e "Extract Text From Region\0icon\x1fscanner"
  echo -e "Record Region (File, GIF)\0icon\x1fvideo-x-generic"
  echo -e "Record Region (File, MP4)\0icon\x1fvideo-x-generic"
  echo -e "Record Window (File, GIF)\0icon\x1fvideo-x-generic"
  echo -e "Record Window (File, MP4)\0icon\x1fvideo-x-generic"
  echo -e "Record Screen (File, GIF)\0icon\x1fvideo-x-generic"
  echo -e "Record Screen (File, MP4)\0icon\x1fvideo-x-generic"
  echo -e "Stop recording\0icon\x1fvideo-x-generic"
}

show_help() {
  echo "USAGE: rofi-screenshot [OPTION] <argument>"
  echo "(no option)"
  echo "    show the screenshot menu"
  echo "-s, --stop"
  echo "    stop recording"
  echo "-h, --help"
  echo "    this screen"
  echo "-d, --directory <directory>"
  echo "    set the screenshot directory"
  echo "-t, --timestamp <format>"
  echo "    set the format used for timestamps, in the format the date"
  echo "    command expects (default '+%d-%m-%Y %H:%M:%S')"
}

# check dependencies
check_deps slop
check_deps ffcast
check_deps ffmpeg
check_deps xclip
check_deps tesseract

# rebind long args as short ones
for arg in "$@"; do
  shift
  case "$arg" in
    '--help') set -- "$@" '-h' ;;
    '--directory') set -- "$@" '-d' ;;
    '--timestamp') set -- "$@" '-t' ;;
    '--stop') set -- "$@" '-s' ;;
    *) set -- "$@" "$arg" ;;
  esac
done

# parse short options
OPTIND=1
date_format="$default_date_format"
while getopts "hd:t:s" opt; do
  case "$opt" in
    'h')
      show_help
      exit 0
      ;;
    'd')
      screenshot_directory="$OPTARG"
      ;;
    't')
      date_format="$OPTARG"
      ;;
    's')
      stop_recording
      exit 0
      ;;
    '?')
      show_help
      exit 1
      ;;
  esac
done
shift $(expr $OPTIND - 1)

if [[ ! -d $screenshot_directory ]]; then
  echo "Path '$screenshot_directory' does not exist"
  exit 1
fi

cmd='date "${date_format}"'
dt=$(eval $cmd)

case $1 in
  'Capture Region (Clipboard)')
    coproc ( capture_region_to_clipboard "$dt"  > /dev/null  2>&1 )
    exit 0
    ;;
  'Capture Region (File)')
    coproc ( capture_region_to_file "$dt"  > /dev/null  2>&1 )
    exit 0
    ;;
  'Capture Window (Clipboard)')
    coproc ( capture_window_to_clipboard "$dt" > /dev/null 2>&1 )
    exit 0
    ;;
  'Capture Window (File)')
    coproc ( capture_window_to_file "$dt" > /dev/null 2>&1 )
    exit 0
    ;;
  'Capture Screen (Clipboard)')
    coproc ( capture_screen_to_clipboard "$dt" > /dev/null 2>&1 )
    exit 0
    ;;
  'Capture Screen (File)')
    coproc ( capture_screen_to_file "$dt" > /dev/null 2>&1 )
    exit 0
    ;;
  'Extract Text From Region')
    coproc ( extract_text_from_region "$dt" > /dev/null 2>&1 )
    exit 0
    ;;
  'Record Region (File, MP4)')
    coproc ( record_region_as_mp4 "$dt" > /dev/null 2>&1 )
    exit 0
    ;;
  'Record Region (File, GIF)')
    coproc ( record_region_as_gif "$dt" > /dev/null 2>&1 )
    exit 0
    ;;
  'Record Window (File, MP4)')
    coproc ( record_window_as_mp4 "$dt" > /dev/null 2>&1 )
    exit 0
    ;;
  'Record Window (File, GIF)')
    coproc ( record_window_as_gif "$dt" > /dev/null 2>&1 )
    exit 0
    ;;
  'Record Screen (File, MP4)')
    coproc ( record_screen_as_mp4 "$dt" > /dev/null 2>&1 )
    exit 0
    ;;
  'Record Screen (File, GIF)')
    coproc ( record_screen_as_gif "$dt" > /dev/null 2>&1 )
    exit 0
    ;;
  'Stop recording')
    stop_recording
    exit 0
    ;;
esac

show_options
exit 0
